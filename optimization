import re

def is_constant(expr):
    try: return bool(eval(expr) or True)
    except: return False

def optimize_code(lines):
    optimized, constants, copies, expressions = [], {}, {}, {}
    for line in lines:
        if "=" not in line:
            optimized.append(line)
            continue
        lhs, rhs= [part.strip() for part in line.split("=", 1)]
        if is_constant(rhs):
            val = str(eval(rhs))
            constants[lhs] = val
            optimized.append(f"{lhs} = {val}")
            continue
        if rhs.isidentifier():
            copies[lhs] = copies.get(rhs, rhs)
            continue
        new_rhs = re.sub(r'\b(\w+)\b', lambda m: copies.get(m.group(1), m.group(1)), rhs)
        for expr, var in expressions.items():
            if expr in new_rhs:
                new_rhs = new_rhs.replace(expr, var)
        expressions[new_rhs] = lhs
        optimized.append(f"{lhs} = {new_rhs}")
    return optimized

with open("input.txt", "r") as f:
    lines = [line.strip() for line in f if line.strip()]
print("\nbefore optimization")
for line in lines:
    print(line)
optimized = optimize_code(lines)
print("\nafter optimization")
for line in optimized:
    print(line)


-----create a input.txt file ----------
T1=5*3+10
T3=T1
T2=T1+T3
T5=4*T2
T6=4*T2+100

